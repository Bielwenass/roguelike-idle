import { Point } from '@pixi/math';
import { Sprite } from '@pixi/sprite';

import { textureTile, textureWall } from './Graphics';
import { basicBfs } from './Movement';
import { TILE_SIZE } from '../constants';
import { EntityType } from '../data/enums/EntityType';

import { Actor } from '../types/Actor';
import { Cell } from '../types/Cell';
import { PlayBoard } from '../types/PlayBoard';
import { WorldContainer } from '../types/WorldContainer';

import { get2dArray } from '../utils/get2dArray';
import { getDistance } from '../utils/getDistance';

let freeTiles: Point[] = [];
let visibleTiles: Point[] = [];

export function getRandomFreeTilePoint(): Point {
  return freeTiles.splice(Math.floor(Math.random() * freeTiles.length), 1)[0] ?? new Point(0, 0);
}

// Convert map generated by WFC to playboard
export function convertToBoard(protoBoard: number[][]): PlayBoard {
  const width = protoBoard.length;
  const height = protoBoard[0].length;

  const resultBoard = get2dArray(width, height, {}) as PlayBoard;

  for (let x = 0; x < width; x += 1) {
    for (let y = 0; y < height; y += 1) {
      resultBoard[x][y] = {
        isGround: protoBoard[x][y] !== 0,
        entityType: EntityType.None,
        position: new Point(x, y),
        wasSeen: false,
        hasActor: false,
      } as Cell;
    }
  }

  freeTiles = resultBoard
    .flat()
    .filter((e) => e.isGround && !e.hasActor)
    .map((e) => e.position);

  // Select the exit tile
  const exitTilePoint = getRandomFreeTilePoint();
  const exitTile = resultBoard[exitTilePoint.x][exitTilePoint.y];

  exitTile.entityType = EntityType.Exit;

  return resultBoard;
}

export function tileBoard(world: WorldContainer) {
  for (const [x, cellRow] of world.board.entries()) {
    for (const [y, cell] of cellRow.entries()) {
      let newTileSprite;

      if (cell.isGround) {
        newTileSprite = new Sprite(textureTile);
      } else {
        newTileSprite = new Sprite(textureWall);
      }

      newTileSprite.width = TILE_SIZE;
      newTileSprite.height = TILE_SIZE;

      const newTile = world.addChild(newTileSprite);

      newTile.x = x * TILE_SIZE;
      newTile.y = y * TILE_SIZE;

      newTile.interactive = false;
      newTile.visible = false;
      cell.sprite = newTile;
    }
  }
}

export function isPointVisible(point: Point) {
  return visibleTiles.some((e) => e.x === point.x && e.y === point.y);
}

// Update tiles visibility
export function updateTilesVisibility(player: Actor, playBoard: PlayBoard): PlayBoard {
  visibleTiles = basicBfs(playBoard, player.position, player.sightRange);

  return playBoard.map((e) => e.map((cell) => {
    const dist = getDistance(player.position, cell.position);

    if (isPointVisible(cell.position)) {
      cell.wasSeen = true;
      cell.sprite.visible = true;
      cell.sprite.alpha = 1;

      if (dist === 1 && cell.isGround) {
        cell.sprite.tint = 0xffff88;
        cell.sprite.interactive = true;
      } else {
        cell.sprite.tint = 0xffffff;
        cell.sprite.interactive = false;
      }
    } else if (cell.wasSeen) {
      cell.sprite.alpha = 0.5;
    } else {
      cell.sprite.visible = false;
    }

    return cell;
  }));
}
